name: Continous Integration

on:
  push:
    branches:
      - main
      - master
  release:
    types:
      - created

jobs:
  linux-tests:
    strategy:
      fail-fast: false
      matrix:
        config:
          - python-version: 3.6
            tox: 36
          - python-version: 3.7
            tox: 37
          - python-version: 3.8
            tox: 38
          - python-version: 3.9
            tox: 39
          - python-version: '3.10'
            tox: 310
          - python-version: pypy-3.7
            tox: py3
          - python-version: pypy-3.8
            tox: py3
          - python-version: pypy-3.9
            tox: py3
        poetry-version: [ 1.1.4 ]
        os: [ macos-latest, windows-2019, ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up testing Python ${{ matrix.config.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.config.python-version }}
          architecture: x64
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install poetry
        uses: snok/install-poetry@v1.0.0
        with:
          version: ${{ matrix.poetry-version }}
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Run tox lint
        run: |
          poetry run tox -e py${{ matrix.config.tox }}
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: unittests
          env_vars: OS,PYTHON
          name: codecov-umbrella
          fail_ci_if_error: true
          verbose: true
  build-and-publish:
    name: Build and publish Python distributions ðŸ“¦ to PyPI and TestPyPI
    runs-on: ubuntu-20.04
    needs:
      - linux-tests
    steps:
      - uses: actions/checkout@v2
      - name: Set up base Python 3.9
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Python Poetry Action
        uses: abatilo/actions-poetry@v2.1.0
        with:
          poetry-version: 1.1.4
      - name: Publish distribution ðŸ“¦ with test.pypi.org
        if: startsWith(github.ref, 'refs/tags')
        run: |
          poetry config repositories.testpypi https://test.pypi.org/legacy/
          poetry config pypi-token.testpypi ${{ secrets.TEST_PYPI_API_TOKEN }}
          poetry build
          poetry publish -r testpypi
      - name: Publish distribution ðŸ“¦ to PyPI
        if: startsWith(github.ref, 'refs/tags')
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }}
          poetry build
          poetry publish
