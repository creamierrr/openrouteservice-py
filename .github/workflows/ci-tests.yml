name: tests

on:
  pull_request:
    branches: '**'

jobs:
  lint:
    runs-on: ubuntu-20.04
    steps:
      - name: checkout
        uses: actions/checkout@v2
      - name: Install Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Update pip
        run: |
          python -m pip install --upgrade pip
      - name: Install and run pre-commit
        uses: pre-commit/action@v2.0.0
        with:
          extra_args: --all-files
  test:
    needs:
      - lint
    strategy:
      fail-fast: true
      matrix:
        config:
          - python-version: 3.6
            tox: 36
          - python-version: 3.7
            tox: 37
          - python-version: 3.8
            tox: 38
          - python-version: 3.9
            tox: 39
          - python-version: '3.10'
            tox: 310
          - python-version: pypy-3.7
            tox: py3
          - python-version: pypy-3.8
            tox: py3
          - python-version: pypy-3.9
            tox: py3
        poetry-version: [ 1.1.11 ]
        os: [ macos-latest, windows-2019, ubuntu-20.04, ubuntu-18.04 ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: Set up testing Python ${{ matrix.config.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.config.python-version }}
        architecture: x64
    - name: Update pip
      run: |
        python -m pip install --upgrade pip
    - name: Install poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ matrix.poetry-version }}
        virtualenvs-path: .venv
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: false
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
    - name: Install dependencies
      run: poetry install
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
    - name: Run tox lint
      run: |
        poetry run tox -e py${{ matrix.config.tox }}
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: unittests
        env_vars: OS,PYTHON
        name: codecov-umbrella
        fail_ci_if_error: true
        verbose: true
